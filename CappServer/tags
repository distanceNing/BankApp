!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCOUNT_STATE	define.h	/^enum ACCOUNT_STATE$/;"	g
ACCOUNT_STATE_AVAILABLE	define.h	/^	ACCOUNT_STATE_AVAILABLE = 1,$/;"	e	enum:ACCOUNT_STATE
ACCOUNT_STATE_UNAVAILABLE	define.h	/^	ACCOUNT_STATE_UNAVAILABLE = 0$/;"	e	enum:ACCOUNT_STATE
ADMAIN	define.h	/^	ADMAIN=1,$/;"	e	enum:USER_TYPE
ADMIN_INFO	define.h	/^struct ADMIN_INFO$/;"	s
ADMIN_INFO::date	define.h	/^	char date[32];$/;"	m	struct:ADMIN_INFO	access:public
ADMIN_INFO::name	define.h	/^	char name[32];$/;"	m	struct:ADMIN_INFO	access:public
ALREADY_ONLINE	define.h	/^	ALREADY_ONLINE$/;"	e	enum:LOGIN_ERROR
Accept	Csocket.cpp	/^bool Csocket::Accept(Csocket & socka, char * fromIP, UINT & fromPort)$/;"	f	class:Csocket	signature:(Csocket & socka, char * fromIP, UINT & fromPort)
Accept	Csocket.h	/^	bool Accept(Csocket &socka, char* fromIP, UINT  &fromPort);$/;"	p	class:Csocket	access:public	signature:(Csocket &socka, char* fromIP, UINT &fromPort)
AdmainRequest	AdmainRequest.h	/^	AdmainRequest(Csocket* user_sock, char* id = NULL) :BaseRequest(id), sock(user_sock) {}$/;"	f	class:AdmainRequest	access:public	signature:(Csocket* user_sock, char* id = NULL)
AdmainRequest	AdmainRequest.h	/^class AdmainRequest :$/;"	c	inherits:BaseRequest
AdmainRequest::AdmainRequest	AdmainRequest.h	/^	AdmainRequest(Csocket* user_sock, char* id = NULL) :BaseRequest(id), sock(user_sock) {}$/;"	f	class:AdmainRequest	access:public	signature:(Csocket* user_sock, char* id = NULL)
AdmainRequest::ClientRequestBlockList	AdmainRequest.cpp	/^bool AdmainRequest::ClientRequestBlockList()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::ClientRequestBlockList	AdmainRequest.h	/^	bool ClientRequestBlockList();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::FreezeAcc	AdmainRequest.cpp	/^bool AdmainRequest::FreezeAcc(const char* id)$/;"	f	class:AdmainRequest	signature:(const char* id)
AdmainRequest::FreezeAcc	AdmainRequest.h	/^	bool FreezeAcc(const char * id);$/;"	p	class:AdmainRequest	access:public	signature:(const char * id)
AdmainRequest::OnAddAccount	AdmainRequest.cpp	/^bool AdmainRequest::OnAddAccount()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnAddAccount	AdmainRequest.h	/^	bool OnAddAccount();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnAddCard	AdmainRequest.cpp	/^bool AdmainRequest::OnAddCard()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnAddCard	AdmainRequest.h	/^	bool OnAddCard();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnAdmDelete	AdmainRequest.cpp	/^bool AdmainRequest::OnAdmDelete()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnAdmDelete	AdmainRequest.h	/^	bool OnAdmDelete();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnAdmRefresh	AdmainRequest.cpp	/^bool AdmainRequest::OnAdmRefresh()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnAdmRefresh	AdmainRequest.h	/^	bool OnAdmRefresh();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnDesAcc	AdmainRequest.cpp	/^bool AdmainRequest::OnDesAcc()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnDesAcc	AdmainRequest.h	/^	bool OnDesAcc();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnDesCard	AdmainRequest.cpp	/^bool AdmainRequest::OnDesCard()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnDesCard	AdmainRequest.h	/^	bool OnDesCard();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnExit	AdmainRequest.cpp	/^bool AdmainRequest::OnExit()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnExit	AdmainRequest.h	/^	bool OnExit();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnLogin	AdmainRequest.cpp	/^bool AdmainRequest::OnLogin()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnLogin	AdmainRequest.h	/^	bool OnLogin();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnModState	AdmainRequest.h	/^	bool OnModState();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnReceive	AdmainRequest.cpp	/^void AdmainRequest::OnReceive()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnReceive	AdmainRequest.h	/^	void OnReceive();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnRefresh	AdmainRequest.cpp	/^bool AdmainRequest::OnRefresh()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnRefresh	AdmainRequest.h	/^	bool OnRefresh();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnSearchAcc	AdmainRequest.cpp	/^bool AdmainRequest::OnSearchAcc()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnSearchAcc	AdmainRequest.h	/^	bool OnSearchAcc();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::OnSearchCard	AdmainRequest.cpp	/^bool AdmainRequest::OnSearchCard()$/;"	f	class:AdmainRequest	signature:()
AdmainRequest::OnSearchCard	AdmainRequest.h	/^	bool OnSearchCard();$/;"	p	class:AdmainRequest	access:public	signature:()
AdmainRequest::UnFreezeAcc	AdmainRequest.cpp	/^bool AdmainRequest::UnFreezeAcc(const char * id)$/;"	f	class:AdmainRequest	signature:(const char * id)
AdmainRequest::UnFreezeAcc	AdmainRequest.h	/^	bool UnFreezeAcc(const char* id);$/;"	p	class:AdmainRequest	access:public	signature:(const char* id)
AdmainRequest::sock	AdmainRequest.h	/^	Csocket* sock;$/;"	m	class:AdmainRequest	access:private
AdmainRequest::~AdmainRequest	AdmainRequest.h	/^	~AdmainRequest() {}$/;"	f	class:AdmainRequest	access:public	signature:()
BaseRequest	BaseRequest.h	/^	BaseRequest(char* id=NULL):ID(id){}$/;"	f	class:BaseRequest	access:public	signature:(char* id=NULL)
BaseRequest	BaseRequest.h	/^class BaseRequest$/;"	c
BaseRequest::BaseRequest	BaseRequest.h	/^	BaseRequest(char* id=NULL):ID(id){}$/;"	f	class:BaseRequest	access:public	signature:(char* id=NULL)
BaseRequest::CreateAccount	BaseRequest.cpp	/^bool BaseRequest::CreateAccount(struct LOGIN_INFO& user_info)$/;"	f	class:BaseRequest	signature:(struct LOGIN_INFO& user_info)
BaseRequest::CreateAccount	BaseRequest.h	/^	bool CreateAccount(struct LOGIN_INFO&);$/;"	p	class:BaseRequest	access:public	signature:(struct LOGIN_INFO&)
BaseRequest::CreateCard	BaseRequest.cpp	/^bool BaseRequest::CreateCard(struct LOGIN_INFO & card_info)$/;"	f	class:BaseRequest	signature:(struct LOGIN_INFO & card_info)
BaseRequest::CreateCard	BaseRequest.h	/^	bool CreateCard(struct LOGIN_INFO&);$/;"	p	class:BaseRequest	access:public	signature:(struct LOGIN_INFO&)
BaseRequest::DestoryAccount	BaseRequest.cpp	/^bool BaseRequest::DestoryAccount(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
BaseRequest::DestoryAccount	BaseRequest.h	/^	bool DestoryAccount(const char* id);$/;"	p	class:BaseRequest	access:public	signature:(const char* id)
BaseRequest::DestoryCard	BaseRequest.cpp	/^bool BaseRequest::DestoryCard(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
BaseRequest::DestoryCard	BaseRequest.h	/^	bool DestoryCard(const char * id);$/;"	p	class:BaseRequest	access:public	signature:(const char * id)
BaseRequest::GetUserCardNum	BaseRequest.cpp	/^int BaseRequest::GetUserCardNum(const char* id,std::vector<std::string>&card_no)$/;"	f	class:BaseRequest	signature:(const char* id,std::vector<std::string>&card_no)
BaseRequest::GetUserCardNum	BaseRequest.h	/^	int GetUserCardNum(const char * id,std::vector<std::string>&card_no);$/;"	p	class:BaseRequest	access:public	signature:(const char * id,std::vector<std::string>&card_no)
BaseRequest::GetUserID	BaseRequest.h	/^	const char * GetUserID() { return ID.c_str(); }$/;"	f	class:BaseRequest	access:public	signature:()
BaseRequest::GetUserRecodeNum	BaseRequest.cpp	/^int BaseRequest::GetUserRecodeNum(const char* id,int type,std::vector<std::string>&card_no)$/;"	f	class:BaseRequest	signature:(const char* id,int type,std::vector<std::string>&card_no)
BaseRequest::GetUserRecodeNum	BaseRequest.h	/^	int GetUserRecodeNum(const char * id,int type,std::vector<std::string>&card_no);$/;"	p	class:BaseRequest	access:public	signature:(const char * id,int type,std::vector<std::string>&card_no)
BaseRequest::ID	BaseRequest.h	/^	std::string ID;$/;"	m	class:BaseRequest	access:private
BaseRequest::LoadingDataBase	BaseRequest.cpp	/^bool BaseRequest::LoadingDataBase()$/;"	f	class:BaseRequest	signature:()
BaseRequest::LoadingDataBase	BaseRequest.h	/^	bool LoadingDataBase();$/;"	p	class:BaseRequest	access:public	signature:()
BaseRequest::OffLine	BaseRequest.cpp	/^bool BaseRequest::OffLine(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
BaseRequest::OffLine	BaseRequest.h	/^	bool OffLine(const char* id);$/;"	p	class:BaseRequest	access:public	signature:(const char* id)
BaseRequest::OnLine	BaseRequest.cpp	/^bool BaseRequest::OnLine(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
BaseRequest::OnLine	BaseRequest.h	/^	bool OnLine(const char* id);$/;"	p	class:BaseRequest	access:public	signature:(const char* id)
BaseRequest::OnLogin	BaseRequest.h	/^	virtual bool OnLogin()=0;$/;"	p	class:BaseRequest	access:public	signature:()
BaseRequest::OnReceive	BaseRequest.h	/^	virtual void OnReceive() = 0;$/;"	p	class:BaseRequest	access:public	signature:()
BaseRequest::QuerySignalInfo	BaseRequest.cpp	/^bool BaseRequest::QuerySignalInfo(const char* id,struct CLIENT_INFO *user_info)$/;"	f	class:BaseRequest	signature:(const char* id,struct CLIENT_INFO *user_info)
BaseRequest::QuerySignalInfo	BaseRequest.h	/^	bool QuerySignalInfo(const char* id,struct CLIENT_INFO * user_info);$/;"	p	class:BaseRequest	access:public	signature:(const char* id,struct CLIENT_INFO * user_info)
BaseRequest::SQLOperate	BaseRequest.cpp	/^bool BaseRequest::SQLOperate(const char* sql)$/;"	f	class:BaseRequest	signature:(const char* sql)
BaseRequest::SQLOperate	BaseRequest.h	/^	bool SQLOperate(const char* sql);$/;"	p	class:BaseRequest	access:public	signature:(const char* sql)
BaseRequest::SearchCardInfo	BaseRequest.cpp	/^bool BaseRequest::SearchCardInfo(const char* id,struct CARD_INFO *user_info)$/;"	f	class:BaseRequest	signature:(const char* id,struct CARD_INFO *user_info)
BaseRequest::SearchCardInfo	BaseRequest.h	/^	bool SearchCardInfo(const char * id,struct CARD_INFO * card_info);$/;"	p	class:BaseRequest	access:public	signature:(const char * id,struct CARD_INFO * card_info)
BaseRequest::SearchRecordInfo	BaseRequest.cpp	/^bool BaseRequest::SearchRecordInfo(const char* id,int type,struct TRCODE_INFO * user_info)$/;"	f	class:BaseRequest	signature:(const char* id,int type,struct TRCODE_INFO * user_info)
BaseRequest::SearchRecordInfo	BaseRequest.h	/^	bool SearchRecordInfo(const char* id,int type,struct TRCODE_INFO  * info);$/;"	p	class:BaseRequest	access:public	signature:(const char* id,int type,struct TRCODE_INFO * info)
BaseRequest::SetUserID	BaseRequest.h	/^	void SetUserID(const char* id){$/;"	f	class:BaseRequest	access:public	signature:(const char* id)
BaseRequest::VerifyInfo	BaseRequest.cpp	/^LOGIN_ERROR BaseRequest::VerifyInfo(bool isClient,LOGIN_INFO & login_info)$/;"	f	class:BaseRequest	signature:(bool isClient,LOGIN_INFO & login_info)
BaseRequest::VerifyInfo	BaseRequest.h	/^	LOGIN_ERROR VerifyInfo(bool isClient,struct LOGIN_INFO &login_info);$/;"	p	class:BaseRequest	access:public	signature:(bool isClient,struct LOGIN_INFO &login_info)
BaseRequest::mysql_conn	BaseRequest.h	/^	MySQL mysql_conn;$/;"	m	class:BaseRequest	access:private
CARD_INFO	define.h	/^struct CARD_INFO$/;"	s
CARD_INFO::credit	define.h	/^	char credit[4];$/;"	m	struct:CARD_INFO	access:public
CARD_INFO::date	define.h	/^	char date[32];$/;"	m	struct:CARD_INFO	access:public
CARD_INFO::id	define.h	/^	char id[16];$/;"	m	struct:CARD_INFO	access:public
CARD_INFO::money	define.h	/^	char money[20];$/;"	m	struct:CARD_INFO	access:public
CARD_INFO::name	define.h	/^	char name[32];$/;"	m	struct:CARD_INFO	access:public
CARD_INFO::status	define.h	/^	char status[4];$/;"	m	struct:CARD_INFO	access:public
CHECK_SUCCESS	define.h	/^	CHECK_SUCCESS=1001,$/;"	e	enum:LOGIN_ERROR
CLIENT	define.h	/^	CLIENT$/;"	e	enum:USER_TYPE
CLIENT_INFO	define.h	/^struct CLIENT_INFO$/;"	s
CLIENT_INFO::credit	define.h	/^	char credit[4];$/;"	m	struct:CLIENT_INFO	access:public
CLIENT_INFO::date	define.h	/^	char date[32];$/;"	m	struct:CLIENT_INFO	access:public
CLIENT_INFO::id	define.h	/^	char id[16];$/;"	m	struct:CLIENT_INFO	access:public
CLIENT_INFO::money	define.h	/^	char money[20];$/;"	m	struct:CLIENT_INFO	access:public
CLIENT_INFO::name	define.h	/^	char name[32];$/;"	m	struct:CLIENT_INFO	access:public
CLIENT_INFO::pass	define.h	/^	char pass[16];$/;"	m	struct:CLIENT_INFO	access:public
CLIENT_INFO::status	define.h	/^	char status[4];$/;"	m	struct:CLIENT_INFO	access:public
ClientRequest	ClientRequest.h	/^	ClientRequest(Csocket* user_sock, char* id=NULL) :BaseRequest(id),sock(user_sock) {}$/;"	f	class:ClientRequest	access:public	signature:(Csocket* user_sock, char* id=NULL)
ClientRequest	ClientRequest.h	/^class ClientRequest$/;"	c	inherits:BaseRequest
ClientRequest::ClientRequest	ClientRequest.h	/^	ClientRequest(Csocket* user_sock, char* id=NULL) :BaseRequest(id),sock(user_sock) {}$/;"	f	class:ClientRequest	access:public	signature:(Csocket* user_sock, char* id=NULL)
ClientRequest::OnDesAcc	ClientRequest.cpp	/^bool ClientRequest::OnDesAcc()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnDesAcc	ClientRequest.h	/^	bool OnDesAcc();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnDesCard	ClientRequest.h	/^	bool OnDesCard();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnExit	ClientRequest.cpp	/^bool ClientRequest::OnExit()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnExit	ClientRequest.h	/^	bool OnExit();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnLogin	ClientRequest.cpp	/^bool ClientRequest::OnLogin()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnLogin	ClientRequest.h	/^	bool OnLogin();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnMod	ClientRequest.cpp	/^bool ClientRequest::OnMod()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnMod	ClientRequest.h	/^	bool OnMod();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnReceive	ClientRequest.cpp	/^void ClientRequest::OnReceive()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnReceive	ClientRequest.h	/^	void OnReceive();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnRecord	ClientRequest.cpp	/^bool ClientRequest::OnRecord(int type)$/;"	f	class:ClientRequest	signature:(int type)
ClientRequest::OnRecord	ClientRequest.h	/^	bool OnRecord(int type);	$/;"	p	class:ClientRequest	access:public	signature:(int type)
ClientRequest::OnRefresh	ClientRequest.cpp	/^bool ClientRequest::OnRefresh()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnRefresh	ClientRequest.h	/^	bool OnRefresh();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnSave	ClientRequest.cpp	/^bool ClientRequest::OnSave()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnSave	ClientRequest.h	/^	bool OnSave();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnSearchAcc	ClientRequest.cpp	/^bool ClientRequest::OnSearchAcc()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnSearchAcc	ClientRequest.h	/^	bool OnSearchAcc();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnSerAllCard	ClientRequest.cpp	/^bool ClientRequest::OnSerAllCard()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnSerAllCard	ClientRequest.h	/^	bool OnSerAllCard();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnTrans	ClientRequest.cpp	/^bool ClientRequest::OnTrans()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnTrans	ClientRequest.h	/^	bool OnTrans();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::OnWithdrow	ClientRequest.cpp	/^bool ClientRequest::OnWithdrow()$/;"	f	class:ClientRequest	signature:()
ClientRequest::OnWithdrow	ClientRequest.h	/^	bool OnWithdrow();$/;"	p	class:ClientRequest	access:public	signature:()
ClientRequest::sock	ClientRequest.h	/^	Csocket* sock;$/;"	m	class:ClientRequest	access:private
ClientRequest::~ClientRequest	ClientRequest.h	/^	~ClientRequest() {};$/;"	f	class:ClientRequest	access:public	signature:()
ClientRequestBlockList	AdmainRequest.cpp	/^bool AdmainRequest::ClientRequestBlockList()$/;"	f	class:AdmainRequest	signature:()
ClientRequestBlockList	AdmainRequest.h	/^	bool ClientRequestBlockList();$/;"	p	class:AdmainRequest	access:public	signature:()
CloseSocket	Csocket.cpp	/^bool Csocket::CloseSocket()$/;"	f	class:Csocket	signature:()
CloseSocket	Csocket.h	/^	bool CloseSocket();$/;"	p	class:Csocket	access:public	signature:()
Connect	Csocket.cpp	/^bool Csocket::Connect(char* conIP, UINT &conPort)$/;"	f	class:Csocket	signature:(char* conIP, UINT &conPort)
Connect	Csocket.h	/^	bool Connect(char* conIP, UINT &conPort);$/;"	p	class:Csocket	access:public	signature:(char* conIP, UINT &conPort)
ConnectMySQL	mysql_cpp.cpp	/^bool MySQL::ConnectMySQL(const char* host,const char* user,const char* passwd,const char* database,unsigned int port,const char* unix_socket,unsigned long client_flag)$/;"	f	class:MySQL	signature:(const char* host,const char* user,const char* passwd,const char* database,unsigned int port,const char* unix_socket,unsigned long client_flag)
ConnectMySQL	mysql_cpp.h	/^	bool ConnectMySQL(const char* host,const char* user,const char* passwd,const char*database,unsigned int port,const char* unix_socket,unsigned long client_flag);$/;"	p	class:MySQL	access:public	signature:(const char* host,const char* user,const char* passwd,const char*database,unsigned int port,const char* unix_socket,unsigned long client_flag)
CreatSocket	Csocket.cpp	/^bool Csocket::CreatSocket(int af, int type, int prot)$/;"	f	class:Csocket	signature:(int af, int type, int prot)
CreatSocket	Csocket.h	/^	bool CreatSocket(int af = AF_INET, int type = SOCK_STREAM, int prot = 0);$/;"	p	class:Csocket	access:public	signature:(int af = AF_INET, int type = SOCK_STREAM, int prot = 0)
CreateAccount	BaseRequest.cpp	/^bool BaseRequest::CreateAccount(struct LOGIN_INFO& user_info)$/;"	f	class:BaseRequest	signature:(struct LOGIN_INFO& user_info)
CreateAccount	BaseRequest.h	/^	bool CreateAccount(struct LOGIN_INFO&);$/;"	p	class:BaseRequest	access:public	signature:(struct LOGIN_INFO&)
CreateCard	BaseRequest.cpp	/^bool BaseRequest::CreateCard(struct LOGIN_INFO & card_info)$/;"	f	class:BaseRequest	signature:(struct LOGIN_INFO & card_info)
CreateCard	BaseRequest.h	/^	bool CreateCard(struct LOGIN_INFO&);$/;"	p	class:BaseRequest	access:public	signature:(struct LOGIN_INFO&)
Csocket	Csocket.cpp	/^Csocket::Csocket()$/;"	f	class:Csocket	signature:()
Csocket	Csocket.h	/^	Csocket();$/;"	p	class:Csocket	access:public	signature:()
Csocket	Csocket.h	/^class Csocket$/;"	c
Csocket::Accept	Csocket.cpp	/^bool Csocket::Accept(Csocket & socka, char * fromIP, UINT & fromPort)$/;"	f	class:Csocket	signature:(Csocket & socka, char * fromIP, UINT & fromPort)
Csocket::Accept	Csocket.h	/^	bool Accept(Csocket &socka, char* fromIP, UINT  &fromPort);$/;"	p	class:Csocket	access:public	signature:(Csocket &socka, char* fromIP, UINT &fromPort)
Csocket::CloseSocket	Csocket.cpp	/^bool Csocket::CloseSocket()$/;"	f	class:Csocket	signature:()
Csocket::CloseSocket	Csocket.h	/^	bool CloseSocket();$/;"	p	class:Csocket	access:public	signature:()
Csocket::Connect	Csocket.cpp	/^bool Csocket::Connect(char* conIP, UINT &conPort)$/;"	f	class:Csocket	signature:(char* conIP, UINT &conPort)
Csocket::Connect	Csocket.h	/^	bool Connect(char* conIP, UINT &conPort);$/;"	p	class:Csocket	access:public	signature:(char* conIP, UINT &conPort)
Csocket::CreatSocket	Csocket.cpp	/^bool Csocket::CreatSocket(int af, int type, int prot)$/;"	f	class:Csocket	signature:(int af, int type, int prot)
Csocket::CreatSocket	Csocket.h	/^	bool CreatSocket(int af = AF_INET, int type = SOCK_STREAM, int prot = 0);$/;"	p	class:Csocket	access:public	signature:(int af = AF_INET, int type = SOCK_STREAM, int prot = 0)
Csocket::Csocket	Csocket.cpp	/^Csocket::Csocket()$/;"	f	class:Csocket	signature:()
Csocket::Csocket	Csocket.h	/^	Csocket();$/;"	p	class:Csocket	access:public	signature:()
Csocket::GetPeerName	Csocket.cpp	/^bool Csocket::GetPeerName(char* peerIP, UINT &peerPort)$/;"	f	class:Csocket	signature:(char* peerIP, UINT &peerPort)
Csocket::GetPeerName	Csocket.h	/^	bool GetPeerName(char* peerIP, UINT &peerPort);$/;"	p	class:Csocket	access:public	signature:(char* peerIP, UINT &peerPort)
Csocket::Listen	Csocket.cpp	/^bool Csocket::Listen(int backlog)$/;"	f	class:Csocket	signature:(int backlog)
Csocket::Listen	Csocket.h	/^	bool Listen(int backlog=5);$/;"	p	class:Csocket	access:public	signature:(int backlog=5)
Csocket::Receive	Csocket.cpp	/^int Csocket::Receive(void *buffer,int buflen)$/;"	f	class:Csocket	signature:(void *buffer,int buflen)
Csocket::Receive	Csocket.h	/^	int Receive(void *buffer, int buflen);$/;"	p	class:Csocket	access:public	signature:(void *buffer, int buflen)
Csocket::ReceiveFrom	Csocket.cpp	/^int Csocket::ReceiveFrom(void *buffer, int buflen, char* fromIP,UINT &fromPort)$/;"	f	class:Csocket	signature:(void *buffer, int buflen, char* fromIP,UINT &fromPort)
Csocket::ReceiveFrom	Csocket.h	/^	int ReceiveFrom(void *buffer, int buflen, char* fromIP, UINT &fromPort);$/;"	p	class:Csocket	access:public	signature:(void *buffer, int buflen, char* fromIP, UINT &fromPort)
Csocket::Send	Csocket.cpp	/^bool Csocket::Send(void* message, int buflen)$/;"	f	class:Csocket	signature:(void* message, int buflen)
Csocket::Send	Csocket.h	/^	bool Send(void* message, int buflen);$/;"	p	class:Csocket	access:public	signature:(void* message, int buflen)
Csocket::Sendto	Csocket.cpp	/^bool Csocket::Sendto(const void *message, const char* toIP, const UINT &toPort)$/;"	f	class:Csocket	signature:(const void *message, const char* toIP, const UINT &toPort)
Csocket::Sendto	Csocket.h	/^	bool Sendto(const void *message,const char* toIP,const UINT &toPort);$/;"	p	class:Csocket	access:public	signature:(const void *message,const char* toIP,const UINT &toPort)
Csocket::sock	Csocket.h	/^	SOCKET sock;$/;"	m	class:Csocket	access:private
Csocket::~Csocket	Csocket.cpp	/^Csocket::~Csocket()$/;"	f	class:Csocket	signature:()
Csocket::~Csocket	Csocket.h	/^	~Csocket();$/;"	p	class:Csocket	access:public	signature:()
DEL	define.h	/^	DEL,$/;"	e	enum:OPERATE_TYPE
DestoryAccount	BaseRequest.cpp	/^bool BaseRequest::DestoryAccount(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
DestoryAccount	BaseRequest.h	/^	bool DestoryAccount(const char* id);$/;"	p	class:BaseRequest	access:public	signature:(const char* id)
DestoryCard	BaseRequest.cpp	/^bool BaseRequest::DestoryCard(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
DestoryCard	BaseRequest.h	/^	bool DestoryCard(const char * id);$/;"	p	class:BaseRequest	access:public	signature:(const char * id)
FreezeAcc	AdmainRequest.cpp	/^bool AdmainRequest::FreezeAcc(const char* id)$/;"	f	class:AdmainRequest	signature:(const char* id)
FreezeAcc	AdmainRequest.h	/^	bool FreezeAcc(const char * id);$/;"	p	class:AdmainRequest	access:public	signature:(const char * id)
GetLastError	Csocket.cpp	/^unsigned int GetLastError()$/;"	f	signature:()
GetLastError	Csocket.h	/^unsigned int GetLastError();$/;"	p	signature:()
GetPeerName	Csocket.cpp	/^bool Csocket::GetPeerName(char* peerIP, UINT &peerPort)$/;"	f	class:Csocket	signature:(char* peerIP, UINT &peerPort)
GetPeerName	Csocket.h	/^	bool GetPeerName(char* peerIP, UINT &peerPort);$/;"	p	class:Csocket	access:public	signature:(char* peerIP, UINT &peerPort)
GetUserCardNum	BaseRequest.cpp	/^int BaseRequest::GetUserCardNum(const char* id,std::vector<std::string>&card_no)$/;"	f	class:BaseRequest	signature:(const char* id,std::vector<std::string>&card_no)
GetUserCardNum	BaseRequest.h	/^	int GetUserCardNum(const char * id,std::vector<std::string>&card_no);$/;"	p	class:BaseRequest	access:public	signature:(const char * id,std::vector<std::string>&card_no)
GetUserID	BaseRequest.h	/^	const char * GetUserID() { return ID.c_str(); }$/;"	f	class:BaseRequest	access:public	signature:()
GetUserRecodeNum	BaseRequest.cpp	/^int BaseRequest::GetUserRecodeNum(const char* id,int type,std::vector<std::string>&card_no)$/;"	f	class:BaseRequest	signature:(const char* id,int type,std::vector<std::string>&card_no)
GetUserRecodeNum	BaseRequest.h	/^	int GetUserRecodeNum(const char * id,int type,std::vector<std::string>&card_no);$/;"	p	class:BaseRequest	access:public	signature:(const char * id,int type,std::vector<std::string>&card_no)
ID	BaseRequest.h	/^	std::string ID;$/;"	m	class:BaseRequest	access:private
InitMySQL	mysql_cpp.cpp	/^bool MySQL::InitMySQL()$/;"	f	class:MySQL	signature:()
InitMySQL	mysql_cpp.h	/^	bool InitMySQL();$/;"	p	class:MySQL	access:public	signature:()
InitialCredit	ClientRequest.h	/^const int InitialCredit = 100;$/;"	v
LOGIN_ERROR	define.h	/^enum LOGIN_ERROR$/;"	g
LOGIN_INFO	define.h	/^struct LOGIN_INFO$/;"	s
LOGIN_INFO::id	define.h	/^	char id[16];$/;"	m	struct:LOGIN_INFO	access:public
LOGIN_INFO::pass	define.h	/^	char pass[16];$/;"	m	struct:LOGIN_INFO	access:public
LPCSTR	Csocket.h	/^typedef const char* LPCSTR;$/;"	t
LPSTR	Csocket.h	/^typedef char* LPSTR;$/;"	t
Listen	Csocket.cpp	/^bool Csocket::Listen(int backlog)$/;"	f	class:Csocket	signature:(int backlog)
Listen	Csocket.h	/^	bool Listen(int backlog=5);$/;"	p	class:Csocket	access:public	signature:(int backlog=5)
LoadingDataBase	BaseRequest.cpp	/^bool BaseRequest::LoadingDataBase()$/;"	f	class:BaseRequest	signature:()
LoadingDataBase	BaseRequest.h	/^	bool LoadingDataBase();$/;"	p	class:BaseRequest	access:public	signature:()
MOD	define.h	/^	MOD,$/;"	e	enum:OPERATE_TYPE
MOD_DATA	define.h	/^struct MOD_DATA$/;"	s
MOD_DATA::name	define.h	/^	char name[32];$/;"	m	struct:MOD_DATA	access:public
MOD_DATA::pass	define.h	/^	char pass[16];$/;"	m	struct:MOD_DATA	access:public
MainLoop	MainLoop.cpp	/^MainLoop::MainLoop()$/;"	f	class:MainLoop	signature:()
MainLoop	MainLoop.h	/^	MainLoop();$/;"	p	class:MainLoop	access:public	signature:()
MainLoop	MainLoop.h	/^class MainLoop$/;"	c
MainLoop::MainLoop	MainLoop.cpp	/^MainLoop::MainLoop()$/;"	f	class:MainLoop	signature:()
MainLoop::MainLoop	MainLoop.h	/^	MainLoop();$/;"	p	class:MainLoop	access:public	signature:()
MainLoop::OnStart	MainLoop.cpp	/^bool MainLoop::OnStart()$/;"	f	class:MainLoop	signature:()
MainLoop::OnStart	MainLoop.h	/^	bool OnStart();$/;"	p	class:MainLoop	access:public	signature:()
MainLoop::sock	MainLoop.h	/^	Csocket *sock;$/;"	m	class:MainLoop	access:private
MainLoop::~MainLoop	MainLoop.cpp	/^MainLoop::~MainLoop()$/;"	f	class:MainLoop	signature:()
MainLoop::~MainLoop	MainLoop.h	/^	~MainLoop();$/;"	p	class:MainLoop	access:public	signature:()
MySQL	mysql_cpp.cpp	/^MySQL::MySQL()$/;"	f	class:MySQL	signature:()
MySQL	mysql_cpp.h	/^	MySQL();$/;"	p	class:MySQL	access:public	signature:()
MySQL	mysql_cpp.h	/^class MySQL:private uncopyable$/;"	c	inherits:uncopyable
MySQL::ConnectMySQL	mysql_cpp.cpp	/^bool MySQL::ConnectMySQL(const char* host,const char* user,const char* passwd,const char* database,unsigned int port,const char* unix_socket,unsigned long client_flag)$/;"	f	class:MySQL	signature:(const char* host,const char* user,const char* passwd,const char* database,unsigned int port,const char* unix_socket,unsigned long client_flag)
MySQL::ConnectMySQL	mysql_cpp.h	/^	bool ConnectMySQL(const char* host,const char* user,const char* passwd,const char*database,unsigned int port,const char* unix_socket,unsigned long client_flag);$/;"	p	class:MySQL	access:public	signature:(const char* host,const char* user,const char* passwd,const char*database,unsigned int port,const char* unix_socket,unsigned long client_flag)
MySQL::InitMySQL	mysql_cpp.cpp	/^bool MySQL::InitMySQL()$/;"	f	class:MySQL	signature:()
MySQL::InitMySQL	mysql_cpp.h	/^	bool InitMySQL();$/;"	p	class:MySQL	access:public	signature:()
MySQL::MySQL	mysql_cpp.cpp	/^MySQL::MySQL()$/;"	f	class:MySQL	signature:()
MySQL::MySQL	mysql_cpp.h	/^	MySQL();$/;"	p	class:MySQL	access:public	signature:()
MySQL::QueryNoResultSet	mysql_cpp.cpp	/^bool MySQL::QueryNoResultSet(const char* const sql_sentence)$/;"	f	class:MySQL	signature:(const char* const sql_sentence)
MySQL::QueryNoResultSet	mysql_cpp.h	/^	bool QueryNoResultSet(const char* const sql_sentence);$/;"	p	class:MySQL	access:public	signature:(const char* const sql_sentence)
MySQL::QueryResultSet	mysql_cpp.cpp	/^mysql_data* MySQL::QueryResultSet(const char* const sql_sentence,int &row,int& fetch)$/;"	f	class:MySQL	signature:(const char* const sql_sentence,int &row,int& fetch)
MySQL::QueryResultSet	mysql_cpp.h	/^	mysql_data* QueryResultSet(const char* const sql_sentence,int& row,int& fetch);$/;"	p	class:MySQL	access:public	signature:(const char* const sql_sentence,int& row,int& fetch)
MySQL::conn_ptr	mysql_cpp.h	/^	MYSQL *conn_ptr;$/;"	m	class:MySQL	access:private
MySQL::~MySQL	mysql_cpp.h	/^	~MySQL()$/;"	f	class:MySQL	access:public	signature:()
NO_THIS_USER	define.h	/^	NO_THIS_USER,$/;"	e	enum:LOGIN_ERROR
OPERATE_TYPE	define.h	/^enum OPERATE_TYPE$/;"	g
OffLine	BaseRequest.cpp	/^bool BaseRequest::OffLine(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
OffLine	BaseRequest.h	/^	bool OffLine(const char* id);$/;"	p	class:BaseRequest	access:public	signature:(const char* id)
OnAddAccount	AdmainRequest.cpp	/^bool AdmainRequest::OnAddAccount()$/;"	f	class:AdmainRequest	signature:()
OnAddAccount	AdmainRequest.h	/^	bool OnAddAccount();$/;"	p	class:AdmainRequest	access:public	signature:()
OnAddCard	AdmainRequest.cpp	/^bool AdmainRequest::OnAddCard()$/;"	f	class:AdmainRequest	signature:()
OnAddCard	AdmainRequest.h	/^	bool OnAddCard();$/;"	p	class:AdmainRequest	access:public	signature:()
OnAdmDelete	AdmainRequest.cpp	/^bool AdmainRequest::OnAdmDelete()$/;"	f	class:AdmainRequest	signature:()
OnAdmDelete	AdmainRequest.h	/^	bool OnAdmDelete();$/;"	p	class:AdmainRequest	access:public	signature:()
OnAdmRefresh	AdmainRequest.cpp	/^bool AdmainRequest::OnAdmRefresh()$/;"	f	class:AdmainRequest	signature:()
OnAdmRefresh	AdmainRequest.h	/^	bool OnAdmRefresh();$/;"	p	class:AdmainRequest	access:public	signature:()
OnDesAcc	AdmainRequest.cpp	/^bool AdmainRequest::OnDesAcc()$/;"	f	class:AdmainRequest	signature:()
OnDesAcc	AdmainRequest.h	/^	bool OnDesAcc();$/;"	p	class:AdmainRequest	access:public	signature:()
OnDesAcc	ClientRequest.cpp	/^bool ClientRequest::OnDesAcc()$/;"	f	class:ClientRequest	signature:()
OnDesAcc	ClientRequest.h	/^	bool OnDesAcc();$/;"	p	class:ClientRequest	access:public	signature:()
OnDesCard	AdmainRequest.cpp	/^bool AdmainRequest::OnDesCard()$/;"	f	class:AdmainRequest	signature:()
OnDesCard	AdmainRequest.h	/^	bool OnDesCard();$/;"	p	class:AdmainRequest	access:public	signature:()
OnDesCard	ClientRequest.h	/^	bool OnDesCard();$/;"	p	class:ClientRequest	access:public	signature:()
OnExit	AdmainRequest.cpp	/^bool AdmainRequest::OnExit()$/;"	f	class:AdmainRequest	signature:()
OnExit	AdmainRequest.h	/^	bool OnExit();$/;"	p	class:AdmainRequest	access:public	signature:()
OnExit	ClientRequest.cpp	/^bool ClientRequest::OnExit()$/;"	f	class:ClientRequest	signature:()
OnExit	ClientRequest.h	/^	bool OnExit();$/;"	p	class:ClientRequest	access:public	signature:()
OnLine	BaseRequest.cpp	/^bool BaseRequest::OnLine(const char* id)$/;"	f	class:BaseRequest	signature:(const char* id)
OnLine	BaseRequest.h	/^	bool OnLine(const char* id);$/;"	p	class:BaseRequest	access:public	signature:(const char* id)
OnLogin	AdmainRequest.cpp	/^bool AdmainRequest::OnLogin()$/;"	f	class:AdmainRequest	signature:()
OnLogin	AdmainRequest.h	/^	bool OnLogin();$/;"	p	class:AdmainRequest	access:public	signature:()
OnLogin	BaseRequest.h	/^	virtual bool OnLogin()=0;$/;"	p	class:BaseRequest	access:public	signature:()
OnLogin	ClientRequest.cpp	/^bool ClientRequest::OnLogin()$/;"	f	class:ClientRequest	signature:()
OnLogin	ClientRequest.h	/^	bool OnLogin();$/;"	p	class:ClientRequest	access:public	signature:()
OnMessage	MainLoop.cpp	/^void OnMessage(BaseRequest* user_request)$/;"	f	signature:(BaseRequest* user_request)
OnMod	ClientRequest.cpp	/^bool ClientRequest::OnMod()$/;"	f	class:ClientRequest	signature:()
OnMod	ClientRequest.h	/^	bool OnMod();$/;"	p	class:ClientRequest	access:public	signature:()
OnModState	AdmainRequest.h	/^	bool OnModState();$/;"	p	class:AdmainRequest	access:public	signature:()
OnReceive	AdmainRequest.cpp	/^void AdmainRequest::OnReceive()$/;"	f	class:AdmainRequest	signature:()
OnReceive	AdmainRequest.h	/^	void OnReceive();$/;"	p	class:AdmainRequest	access:public	signature:()
OnReceive	BaseRequest.h	/^	virtual void OnReceive() = 0;$/;"	p	class:BaseRequest	access:public	signature:()
OnReceive	ClientRequest.cpp	/^void ClientRequest::OnReceive()$/;"	f	class:ClientRequest	signature:()
OnReceive	ClientRequest.h	/^	void OnReceive();$/;"	p	class:ClientRequest	access:public	signature:()
OnRecord	ClientRequest.cpp	/^bool ClientRequest::OnRecord(int type)$/;"	f	class:ClientRequest	signature:(int type)
OnRecord	ClientRequest.h	/^	bool OnRecord(int type);	$/;"	p	class:ClientRequest	access:public	signature:(int type)
OnRefresh	AdmainRequest.cpp	/^bool AdmainRequest::OnRefresh()$/;"	f	class:AdmainRequest	signature:()
OnRefresh	AdmainRequest.h	/^	bool OnRefresh();$/;"	p	class:AdmainRequest	access:public	signature:()
OnRefresh	ClientRequest.cpp	/^bool ClientRequest::OnRefresh()$/;"	f	class:ClientRequest	signature:()
OnRefresh	ClientRequest.h	/^	bool OnRefresh();$/;"	p	class:ClientRequest	access:public	signature:()
OnSave	ClientRequest.cpp	/^bool ClientRequest::OnSave()$/;"	f	class:ClientRequest	signature:()
OnSave	ClientRequest.h	/^	bool OnSave();$/;"	p	class:ClientRequest	access:public	signature:()
OnSearchAcc	AdmainRequest.cpp	/^bool AdmainRequest::OnSearchAcc()$/;"	f	class:AdmainRequest	signature:()
OnSearchAcc	AdmainRequest.h	/^	bool OnSearchAcc();$/;"	p	class:AdmainRequest	access:public	signature:()
OnSearchAcc	ClientRequest.cpp	/^bool ClientRequest::OnSearchAcc()$/;"	f	class:ClientRequest	signature:()
OnSearchAcc	ClientRequest.h	/^	bool OnSearchAcc();$/;"	p	class:ClientRequest	access:public	signature:()
OnSearchCard	AdmainRequest.cpp	/^bool AdmainRequest::OnSearchCard()$/;"	f	class:AdmainRequest	signature:()
OnSearchCard	AdmainRequest.h	/^	bool OnSearchCard();$/;"	p	class:AdmainRequest	access:public	signature:()
OnSerAllCard	ClientRequest.cpp	/^bool ClientRequest::OnSerAllCard()$/;"	f	class:ClientRequest	signature:()
OnSerAllCard	ClientRequest.h	/^	bool OnSerAllCard();$/;"	p	class:ClientRequest	access:public	signature:()
OnStart	MainLoop.cpp	/^bool MainLoop::OnStart()$/;"	f	class:MainLoop	signature:()
OnStart	MainLoop.h	/^	bool OnStart();$/;"	p	class:MainLoop	access:public	signature:()
OnTrans	ClientRequest.cpp	/^bool ClientRequest::OnTrans()$/;"	f	class:ClientRequest	signature:()
OnTrans	ClientRequest.h	/^	bool OnTrans();$/;"	p	class:ClientRequest	access:public	signature:()
OnWithdrow	ClientRequest.cpp	/^bool ClientRequest::OnWithdrow()$/;"	f	class:ClientRequest	signature:()
OnWithdrow	ClientRequest.h	/^	bool OnWithdrow();$/;"	p	class:ClientRequest	access:public	signature:()
PASSWD_ERROR	define.h	/^	PASSWD_ERROR,$/;"	e	enum:LOGIN_ERROR
PORT	define.h	138;"	d
QueryNoResultSet	mysql_cpp.cpp	/^bool MySQL::QueryNoResultSet(const char* const sql_sentence)$/;"	f	class:MySQL	signature:(const char* const sql_sentence)
QueryNoResultSet	mysql_cpp.h	/^	bool QueryNoResultSet(const char* const sql_sentence);$/;"	p	class:MySQL	access:public	signature:(const char* const sql_sentence)
QueryResultSet	mysql_cpp.cpp	/^mysql_data* MySQL::QueryResultSet(const char* const sql_sentence,int &row,int& fetch)$/;"	f	class:MySQL	signature:(const char* const sql_sentence,int &row,int& fetch)
QueryResultSet	mysql_cpp.h	/^	mysql_data* QueryResultSet(const char* const sql_sentence,int& row,int& fetch);$/;"	p	class:MySQL	access:public	signature:(const char* const sql_sentence,int& row,int& fetch)
QuerySignalInfo	BaseRequest.cpp	/^bool BaseRequest::QuerySignalInfo(const char* id,struct CLIENT_INFO *user_info)$/;"	f	class:BaseRequest	signature:(const char* id,struct CLIENT_INFO *user_info)
QuerySignalInfo	BaseRequest.h	/^	bool QuerySignalInfo(const char* id,struct CLIENT_INFO * user_info);$/;"	p	class:BaseRequest	access:public	signature:(const char* id,struct CLIENT_INFO * user_info)
REQ	define.h	/^enum REQ$/;"	g
REQ_ADDACC	define.h	/^	REQ_ADDACC,$/;"	e	enum:REQ
REQ_ADDCARD	define.h	/^	REQ_ADDCARD,$/;"	e	enum:REQ
REQ_ADMINFO	define.h	/^	REQ_ADMINFO,$/;"	e	enum:REQ
REQ_ALLADMINFO	define.h	/^	REQ_ALLADMINFO,$/;"	e	enum:REQ
REQ_DESACC	define.h	/^	REQ_DESACC,$/;"	e	enum:REQ
REQ_DESCARD	define.h	/^	REQ_DESCARD,$/;"	e	enum:REQ
REQ_EXIT	define.h	/^	REQ_EXIT$/;"	e	enum:REQ
REQ_FREEZE	define.h	/^	REQ_FREEZE,$/;"	e	enum:REQ
REQ_LOGIN	define.h	/^	REQ_LOGIN=20,$/;"	e	enum:REQ
REQ_MOD	define.h	/^	REQ_MOD,$/;"	e	enum:REQ
REQ_OFF	define.h	/^	REQ_OFF,$/;"	e	enum:REQ
REQ_SAVE	define.h	/^   	REQ_SAVE,$/;"	e	enum:REQ
REQ_SAVE_RECORD	define.h	/^	REQ_SAVE_RECORD,$/;"	e	enum:REQ
REQ_SERACC	define.h	/^	REQ_SERACC,$/;"	e	enum:REQ
REQ_SERALLCARD	define.h	/^	REQ_SERALLCARD,$/;"	e	enum:REQ
REQ_SERCARD	define.h	/^	REQ_SERCARD,$/;"	e	enum:REQ
REQ_TRANS	define.h	/^	REQ_TRANS,$/;"	e	enum:REQ
REQ_TRANS_RECORD	define.h	/^	REQ_TRANS_RECORD,$/;"	e	enum:REQ
REQ_UNFREEZE	define.h	/^	REQ_UNFREEZE,$/;"	e	enum:REQ
REQ_WHD	define.h	/^	REQ_WHD,$/;"	e	enum:REQ
REQ_WHD_RECORD	define.h	/^	REQ_WHD_RECORD,$/;"	e	enum:REQ
Receive	Csocket.cpp	/^int Csocket::Receive(void *buffer,int buflen)$/;"	f	class:Csocket	signature:(void *buffer,int buflen)
Receive	Csocket.h	/^	int Receive(void *buffer, int buflen);$/;"	p	class:Csocket	access:public	signature:(void *buffer, int buflen)
ReceiveFrom	Csocket.cpp	/^int Csocket::ReceiveFrom(void *buffer, int buflen, char* fromIP,UINT &fromPort)$/;"	f	class:Csocket	signature:(void *buffer, int buflen, char* fromIP,UINT &fromPort)
ReceiveFrom	Csocket.h	/^	int ReceiveFrom(void *buffer, int buflen, char* fromIP, UINT &fromPort);$/;"	p	class:Csocket	access:public	signature:(void *buffer, int buflen, char* fromIP, UINT &fromPort)
SAVE	define.h	/^	SAVE,$/;"	e	enum:OPERATE_TYPE
SAVE_INFO	define.h	/^struct SAVE_INFO$/;"	s
SAVE_INFO::id	define.h	/^	char id[16];$/;"	m	struct:SAVE_INFO	access:public
SAVE_INFO::money	define.h	/^	char money[20];$/;"	m	struct:SAVE_INFO	access:public
SER_DATA	define.h	/^struct SER_DATA$/;"	s
SER_DATA::id	define.h	/^	char id[16];$/;"	m	struct:SER_DATA	access:public
SER_DATA::name	define.h	/^	char name[16];$/;"	m	struct:SER_DATA	access:public
SOCKET	Csocket.h	/^typedef unsigned int SOCKET;$/;"	t
SOCKET_ERROR	Csocket.h	24;"	d
SQLOperate	BaseRequest.cpp	/^bool BaseRequest::SQLOperate(const char* sql)$/;"	f	class:BaseRequest	signature:(const char* sql)
SQLOperate	BaseRequest.h	/^	bool SQLOperate(const char* sql);$/;"	p	class:BaseRequest	access:public	signature:(const char* sql)
SQL_BUF	define.h	2;"	d
SearchCardInfo	BaseRequest.cpp	/^bool BaseRequest::SearchCardInfo(const char* id,struct CARD_INFO *user_info)$/;"	f	class:BaseRequest	signature:(const char* id,struct CARD_INFO *user_info)
SearchCardInfo	BaseRequest.h	/^	bool SearchCardInfo(const char * id,struct CARD_INFO * card_info);$/;"	p	class:BaseRequest	access:public	signature:(const char * id,struct CARD_INFO * card_info)
SearchRecordInfo	BaseRequest.cpp	/^bool BaseRequest::SearchRecordInfo(const char* id,int type,struct TRCODE_INFO * user_info)$/;"	f	class:BaseRequest	signature:(const char* id,int type,struct TRCODE_INFO * user_info)
SearchRecordInfo	BaseRequest.h	/^	bool SearchRecordInfo(const char* id,int type,struct TRCODE_INFO  * info);$/;"	p	class:BaseRequest	access:public	signature:(const char* id,int type,struct TRCODE_INFO * info)
Send	Csocket.cpp	/^bool Csocket::Send(void* message, int buflen)$/;"	f	class:Csocket	signature:(void* message, int buflen)
Send	Csocket.h	/^	bool Send(void* message, int buflen);$/;"	p	class:Csocket	access:public	signature:(void* message, int buflen)
Sendto	Csocket.cpp	/^bool Csocket::Sendto(const void *message, const char* toIP, const UINT &toPort)$/;"	f	class:Csocket	signature:(const void *message, const char* toIP, const UINT &toPort)
Sendto	Csocket.h	/^	bool Sendto(const void *message,const char* toIP,const UINT &toPort);$/;"	p	class:Csocket	access:public	signature:(const void *message,const char* toIP,const UINT &toPort)
SetUserID	BaseRequest.h	/^	void SetUserID(const char* id){$/;"	f	class:BaseRequest	access:public	signature:(const char* id)
TRAN	define.h	/^	TRAN=500,$/;"	e	enum:OPERATE_TYPE
TRANS_DATA	define.h	/^struct TRANS_DATA$/;"	s
TRANS_DATA::money	define.h	/^	char money[20];$/;"	m	struct:TRANS_DATA	access:public
TRANS_DATA::the_other_card	define.h	/^	char the_other_card[16];$/;"	m	struct:TRANS_DATA	access:public
TRANS_DATA::this_card	define.h	/^	char this_card[16];$/;"	m	struct:TRANS_DATA	access:public
TRCODE_INFO	define.h	/^struct TRCODE_INFO$/;"	s
TRCODE_INFO::date	define.h	/^	char date[32];$/;"	m	struct:TRCODE_INFO	access:public
TRCODE_INFO::id	define.h	/^	char id[16];$/;"	m	struct:TRCODE_INFO	access:public
TRCODE_INFO::money	define.h	/^	char money[20];$/;"	m	struct:TRCODE_INFO	access:public
TRCODE_INFO::name	define.h	/^	char name[32];$/;"	m	struct:TRCODE_INFO	access:public
UINT	Csocket.h	/^typedef unsigned int UINT;$/;"	t
USER_TYPE	define.h	/^enum USER_TYPE$/;"	g
UnFreezeAcc	AdmainRequest.cpp	/^bool AdmainRequest::UnFreezeAcc(const char * id)$/;"	f	class:AdmainRequest	signature:(const char * id)
UnFreezeAcc	AdmainRequest.h	/^	bool UnFreezeAcc(const char* id);$/;"	p	class:AdmainRequest	access:public	signature:(const char* id)
VerifyInfo	BaseRequest.cpp	/^LOGIN_ERROR BaseRequest::VerifyInfo(bool isClient,LOGIN_INFO & login_info)$/;"	f	class:BaseRequest	signature:(bool isClient,LOGIN_INFO & login_info)
VerifyInfo	BaseRequest.h	/^	LOGIN_ERROR VerifyInfo(bool isClient,struct LOGIN_INFO &login_info);$/;"	p	class:BaseRequest	access:public	signature:(bool isClient,struct LOGIN_INFO &login_info)
_AdmainRequest	AdmainRequest.h	3;"	d
_BaseRequest	BaseRequest.h	2;"	d
_ClientRequest	ClientRequest.h	3;"	d
_MYSQL_DATA	mysql_data.h	12;"	d
_MainLoop	MainLoop.h	3;"	d
_StartUserRequestServe	MainLoop.cpp	/^void  _StartUserRequestServe(void* psock)$/;"	f	signature:(void* psock)
_WINSOCK_DEPRECATED_NO_WARNINGS	Csocket.h	6;"	d
conn_ptr	mysql_cpp.h	/^	MYSQL *conn_ptr;$/;"	m	class:MySQL	access:private
credit	define.h	/^	char credit[4];$/;"	m	struct:CARD_INFO	access:public
credit	define.h	/^	char credit[4];$/;"	m	struct:CLIENT_INFO	access:public
data_structer	mysql_data.h	/^	typedef std::vector<boost::shared_ptr<std::string> > data_structer;$/;"	t	class:mysql_data	access:public
date	define.h	/^	char date[32];$/;"	m	struct:ADMIN_INFO	access:public
date	define.h	/^	char date[32];$/;"	m	struct:CARD_INFO	access:public
date	define.h	/^	char date[32];$/;"	m	struct:CLIENT_INFO	access:public
date	define.h	/^	char date[32];$/;"	m	struct:TRCODE_INFO	access:public
element	mysql_data.h	/^	data_structer element;$/;"	m	class:mysql_data	access:private
id	define.h	/^	char id[16];$/;"	m	struct:CARD_INFO	access:public
id	define.h	/^	char id[16];$/;"	m	struct:CLIENT_INFO	access:public
id	define.h	/^	char id[16];$/;"	m	struct:LOGIN_INFO	access:public
id	define.h	/^	char id[16];$/;"	m	struct:SAVE_INFO	access:public
id	define.h	/^	char id[16];$/;"	m	struct:SER_DATA	access:public
id	define.h	/^	char id[16];$/;"	m	struct:TRCODE_INFO	access:public
main	main.cpp	/^int main()$/;"	f	signature:()
money	define.h	/^	char money[20];$/;"	m	struct:CARD_INFO	access:public
money	define.h	/^	char money[20];$/;"	m	struct:CLIENT_INFO	access:public
money	define.h	/^	char money[20];$/;"	m	struct:SAVE_INFO	access:public
money	define.h	/^	char money[20];$/;"	m	struct:TRANS_DATA	access:public
money	define.h	/^	char money[20];$/;"	m	struct:TRCODE_INFO	access:public
mysql_conn	BaseRequest.h	/^	MySQL mysql_conn;$/;"	m	class:BaseRequest	access:private
mysql_data	mysql_data.h	/^	mysql_data(){}$/;"	f	class:mysql_data	access:public	signature:()
mysql_data	mysql_data.h	/^class mysql_data$/;"	c
mysql_data::data_structer	mysql_data.h	/^	typedef std::vector<boost::shared_ptr<std::string> > data_structer;$/;"	t	class:mysql_data	access:public
mysql_data::element	mysql_data.h	/^	data_structer element;$/;"	m	class:mysql_data	access:private
mysql_data::mysql_data	mysql_data.h	/^	mysql_data(){}$/;"	f	class:mysql_data	access:public	signature:()
mysql_data::operator []	mysql_data.h	/^	const char* operator[](int i)$/;"	f	class:mysql_data	access:public	signature:(int i)
mysql_data::push_back	mysql_data.cpp	/^void mysql_data::push_back( char* str)$/;"	f	class:mysql_data	signature:( char* str)
mysql_data::push_back	mysql_data.h	/^	void push_back( char* str);$/;"	p	class:mysql_data	access:public	signature:( char* str)
mysql_data::size	mysql_data.h	/^	int size()$/;"	f	class:mysql_data	access:public	signature:()
name	define.h	/^	char name[16];$/;"	m	struct:SER_DATA	access:public
name	define.h	/^	char name[32];$/;"	m	struct:ADMIN_INFO	access:public
name	define.h	/^	char name[32];$/;"	m	struct:CARD_INFO	access:public
name	define.h	/^	char name[32];$/;"	m	struct:CLIENT_INFO	access:public
name	define.h	/^	char name[32];$/;"	m	struct:MOD_DATA	access:public
name	define.h	/^	char name[32];$/;"	m	struct:TRCODE_INFO	access:public
obj	makefile	/^obj= AdmainRequest.o ClientRequest.o BaseRequest.o Csocket.o MainLoop.cpp mysql_data.o mysql_cpp.o main.o$/;"	m
operator =	uncopyable.h	/^	uncopyable& operator=(const uncopyable& assign){}$/;"	f	class:uncopyable	access:private	signature:(const uncopyable& assign)
operator []	mysql_data.h	/^	const char* operator[](int i)$/;"	f	class:mysql_data	access:public	signature:(int i)
pass	define.h	/^	char pass[16];$/;"	m	struct:CLIENT_INFO	access:public
pass	define.h	/^	char pass[16];$/;"	m	struct:LOGIN_INFO	access:public
pass	define.h	/^	char pass[16];$/;"	m	struct:MOD_DATA	access:public
push_back	mysql_data.cpp	/^void mysql_data::push_back( char* str)$/;"	f	class:mysql_data	signature:( char* str)
push_back	mysql_data.h	/^	void push_back( char* str);$/;"	p	class:mysql_data	access:public	signature:( char* str)
size	mysql_data.h	/^	int size()$/;"	f	class:mysql_data	access:public	signature:()
sock	AdmainRequest.h	/^	Csocket* sock;$/;"	m	class:AdmainRequest	access:private
sock	ClientRequest.h	/^	Csocket* sock;$/;"	m	class:ClientRequest	access:private
sock	Csocket.h	/^	SOCKET sock;$/;"	m	class:Csocket	access:private
sock	MainLoop.h	/^	Csocket *sock;$/;"	m	class:MainLoop	access:private
socklen_t	Csocket.h	/^typedef int socklen_t;$/;"	t
status	define.h	/^	char status[4];$/;"	m	struct:CARD_INFO	access:public
status	define.h	/^	char status[4];$/;"	m	struct:CLIENT_INFO	access:public
the_other_card	define.h	/^	char the_other_card[16];$/;"	m	struct:TRANS_DATA	access:public
this_card	define.h	/^	char this_card[16];$/;"	m	struct:TRANS_DATA	access:public
uncopyable	uncopyable.h	/^	uncopyable(){}$/;"	f	class:uncopyable	access:public	signature:()
uncopyable	uncopyable.h	/^	uncopyable(const uncopyable& copy){}$/;"	f	class:uncopyable	access:private	signature:(const uncopyable& copy)
uncopyable	uncopyable.h	/^class uncopyable$/;"	c
uncopyable::operator =	uncopyable.h	/^	uncopyable& operator=(const uncopyable& assign){}$/;"	f	class:uncopyable	access:private	signature:(const uncopyable& assign)
uncopyable::uncopyable	uncopyable.h	/^	uncopyable(){}$/;"	f	class:uncopyable	access:public	signature:()
uncopyable::uncopyable	uncopyable.h	/^	uncopyable(const uncopyable& copy){}$/;"	f	class:uncopyable	access:private	signature:(const uncopyable& copy)
uncopyable::~uncopyable	uncopyable.h	/^	~uncopyable(){}$/;"	f	class:uncopyable	access:public	signature:()
~AdmainRequest	AdmainRequest.h	/^	~AdmainRequest() {}$/;"	f	class:AdmainRequest	access:public	signature:()
~ClientRequest	ClientRequest.h	/^	~ClientRequest() {};$/;"	f	class:ClientRequest	access:public	signature:()
~Csocket	Csocket.cpp	/^Csocket::~Csocket()$/;"	f	class:Csocket	signature:()
~Csocket	Csocket.h	/^	~Csocket();$/;"	p	class:Csocket	access:public	signature:()
~MainLoop	MainLoop.cpp	/^MainLoop::~MainLoop()$/;"	f	class:MainLoop	signature:()
~MainLoop	MainLoop.h	/^	~MainLoop();$/;"	p	class:MainLoop	access:public	signature:()
~MySQL	mysql_cpp.h	/^	~MySQL()$/;"	f	class:MySQL	access:public	signature:()
~uncopyable	uncopyable.h	/^	~uncopyable(){}$/;"	f	class:uncopyable	access:public	signature:()
